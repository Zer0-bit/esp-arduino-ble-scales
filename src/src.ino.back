#include <NimBLEDevice.h>

// Scan callback to handle detected BLE devices
class MyAdvertisedDeviceCallbacks : public NimBLEAdvertisedDeviceCallbacks {
    void onResult(NimBLEAdvertisedDevice* advertisedDevice) {
        // Get the name of the device (if available)
        std::string deviceName = advertisedDevice->getName();
        
        if (deviceName.empty()) {
            deviceName = "Unknown device";
        }
        
        // Print the device name and address
        Serial.print("Device: ");
        Serial.print(deviceName.c_str());
        Serial.print(" [");
        Serial.print(advertisedDevice->getAddress().toString().c_str());
        Serial.println("]");
        
        // Check and print the advertised service UUID
        if (advertisedDevice->haveServiceUUID()) {
            Serial.print("Service UUID: ");
            Serial.println(advertisedDevice->getServiceUUID().toString().c_str());
        } else {
            Serial.println("No service UUID found.");
        }

        Serial.println("-------------------------------------");
    }
};

void setup() {
    // Initialize serial communication
    Serial.begin(115200);
    Serial.println("Starting BLE scan...");

    // Initialize NimBLE
    NimBLEDevice::init("");
    
    // Create a BLE scan object
    NimBLEScan* pBLEScan = NimBLEDevice::getScan();

    // Set scan callback
    pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());

    // Active scan enables receiving more data from devices
    pBLEScan->setActiveScan(true);

    // Start scanning for devices, scan duration is in seconds (0 means continuous scanning)
    pBLEScan->start(30, false);
}

void loop() {
    // Do nothing, scanning is handled in the callback
}
